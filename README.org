#+title: Project Outline
#+description: Exam Project "Mapping the reads from NGS data to the genome"
#+authors: Abdullah Cetinkaya, Niklas Horner, Philip Wolper

Link to GitHub repository: https://github.com/pwolper/read-mapping

***** Tasks to-do [0/4]
- [-] Added two pie charts to R code. Maybe still one missing showing percentage of reads for each number of hits. Improve coloring
- [ ] Fix the file path pointer accross the code.
- [ ] Clean up Rmd output of the results. Arrange charts with each other (ggarrange? Can we run the render process from python script?
- [ ] Write description of the project in the README. Maybe present using github website.

* Description
_“Mapping” the reads from NGS data to the genome_

- You have sequenced a genome with Illumina sequencing machine (single-end mode) and got a list of reads in FASTA file. For each read report the coordinate of the nucleotide where is has been mapped and to which strand it has been mapped.
- Please also keep in mind that DNA is double-stranded. In Fasta file of the genome you have only one strand reported, though the read can be mapped onto any of the strand. So please check both strands.
- Please provide the infographics showing how many reads have been mapped to the genome, how many have been mapped several times (how many times exactly?), how many haven’t been mapped.

* Heading + Project Infos
_Project directory structure_
#+begin_src shell
$ ls -l

total 16
drwxrwxr-x 2 philip philip 4096 Feb  4 14:12 code
drwxrwxr-x 2 philip philip 4096 Jan 18 09:03 data
drwxrwxr-x 3 philip philip 4096 Feb  4 14:11 output
-rw-rw-r-- 1 philip philip 2882 Feb  4 14:59 README.org
#+end_src

* Data

** Genome sequencing data
The genome data is required as /.fasta/ file format, and is found in the /data/ folder. Parsing of this happens in mapping.py.

#+begin_src shell
$ head data/Ecoli_genome.fasta

>NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome
AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGCTTCTGAACTGGTTACCTGCCGTGAGTAAATTAAAATTTTATTGACTTAGGTCACTAAATACTTTAACCAATATAGGCATAGCGCACAGAC
AGATAAAAATTACAGAGTACACAACATCCATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAGGTAACGGTGCGGGCTGACGCGTACAGGAAACACAGAAAAAAGCCCGCACCTGACAGTGCGGGCTTTTTTTTTCGACCAAAGG
TAACGAGGTAACAACCATGCGAGTGTTGAAGTTCGGCGGTACATCAGTGGCAAATGCAGAACGTTTTCTGCGTGTTGCCGATATTCTGGAAAGCAATGCCAGGCAGGGGCAGGTGGCCACCGTCCTCTCTGCCCCCGCCAAAATCACCAACCACCTGGTG
GCGATGATTGAAAAAACCATTAGCGGCCAGGATGCTTTACCCAATATCAGCGATGCCGAACGTATTTTTGCCGAACTTTTGACGGGACTCGCCGCCGCCCAGCCGGGGTTCCCGCTGGCGCAATTGAAAACTTTCGTCGATCAGGAATTTGCCCAAATAA
AACATGTCCTGCATGGCATTAGTTTGTTGGGGCAGTGCCCGGATAGCATCAACGCTGCGCTGATTTGCCGTGGCGAGAAA
#+end_src

** Short sequencing reads

#+begin_src shell
$ head data/reads_new.fasta

>0
GCGCTGGCTGACGCGGAATTACGGCGCAAG
>1
CATTCGTACCAGTAGCTGTAGCCCGGCTGA
>2
CAATATCTTTATACGCCATCGGGATTTCGT
>3
CACGCATATCTATCGTAATGGTGGGGAGCA
>4
CAATCCAGTTAGCATGGTAATAAAGAACAC
#+end_src
The supplied reads file consits of 1000 short sequencing reads of 30 nucleotides each.

* How does the code work?
Write a decription of the code here...

** mapping.py

*** getGenome
...
Source code blocks like this:

#+begin_src python

def getGenome(file):                                    #return sequences and description from fasta file (input .fasta)
    sequences = []                                      #create empty array for for-loop
    descriptions = []                                   #create empty array for for-loop
    for record in SeqIO.parse(file, "fasta"):           #loop through all entries in source file and store sequences and descriptions
        seq = record.seq
        des = record.description
        sequences.append(str(seq))
        print(des)
        descriptions.append(des)
    return(sequences, descriptions)

#+end_src

*** getReads

#+begin_src python

def getReads(file):                                     #return reads to map from source file as array (input preferably txt)
    nucl = ["A","T","C","G"]
    reads = []
    with open(file) as read:
        for line in read.readlines():
            if any(base in line for base in nucl):
                line = line[:-1]
                reads.append(line)
    return (reads)

#+end_src

*** compStrand

#+begin_src python

def compStrand(sequences):                               #returns the complementary string of entered sequence as string
    comp_sequences = []
    nucl = {"A": "T", "C": "G", "T": "A", "G": "C"}
    for s in sequences:
        comp_s = str()
        for position,base in enumerate(s):
            if base not in nucl:
                print("Not a valid DNA sequence! Check position",position,"!")
                sys.exit("Script terminated...")
            else:
                comp_s += nucl[base]
        comp_sequences.append(comp_s[::-1])
    return comp_sequences                                #output reverse complementary sequence

#+end_src

*** Barplot

#+begin_src python

def Barplot(gotReads, mappedGenome, gotGenome, path = "./"):                #create a bar plot showing occurrence for all reads for each genome; input return from getReads, mapGenome and getGenome
    if not path =="./":                                                     #create output path if not existing
        if not os.path.exists(path):
            os.makedirs(path)
    fileName = str(path)+ "/"+str(datetime.today().strftime('%Y-%m-%d_'))+ str(gotGenome[1][0]) + ".png"

    number = []
    for entry in mappedGenome:
            m = mappedGenome[entry][0] + mappedGenome[entry][1]
            number.append(len(m))
    plt.bar(range(len(number)), number)
    plt.xlabel("Read Number in File")
    plt.ylabel("Occurrences in Genome")
    plt.savefig(fileName)
    plt.clf()
    print("Boxplot created in",path,"!")

#+end_src

*** MapSummary

#+begin_src python

def MapSummary(mappedGenome, gotGenome, path = "./"):          #create a summary after the genome is mapped in a txt file for each genome; input return from getReads, mapGenome and getGenome
    if not path =="./":                                              #create output path if not existing
        if not os.path.exists(path):
            os.makedirs(path)
    fileName = str(path)+ "/" +str(datetime.today().strftime('%Y-%m-%d_'))+ str(gotGenome[1][0]) +".csv"            #create file name for current genome from fasta description

    with open(fileName, "w", newline = "") as f:                                     #create file
        f = csv.writer(f, delimiter = ";")
        header = ["Read", "Sense", "Antisense", "Number of sense hits", "Number of antisense hits", "Number of total hits"]
        f.writerow(header)
        for read in mappedGenome:
            sense = ", ".join(str(x) for x in mappedGenome[read][0])
            anti = ", ".join(str(x) for x in mappedGenome[read][1])
            n_sense = len(mappedGenome[read][0])                     #write number of found positions
            n_anti = len(mappedGenome[read][1])
            n_total = n_sense + n_anti
            cols = [str(read),sense,anti,str(n_sense),str(n_anti),str(n_total)]
            f.writerow(cols)
            # entry = ";".join(str(x) for x in cols)

    print("Successfully wrote summary file to",path,"!")
#+end_src

*** mapGenome

#+begin_src python

def mapGenome(genomes, Reads):                                      #return dictionary with genome description and read as key and starting positions in genome as value (returns list of list
    start = time.time()
    print("mapping reads to genome...")

    mapped = {}                                                     #create dictionary for output
    genome = str(genomes[0])
    comp_genome = str(compStrand(genomes[0]))

    for read in Reads:
          posFor = [i.start() for i in re.finditer(read, genome)]
          posRev = [i.start() for i in re.finditer(read, comp_genome)]
          posOut = [posFor, posRev]
          mapped[read] = posOut

    end = time.time()
    print("Finished mapping",len(Reads), "reads in",round(end-start),"s!")
    return(mapped)

#+end_src

*** A first glace at mapping results

[[./output/NC_000913.3 Escherichia coli str. K-12 substr. MG1655, complete genome.png]]

** main.py

Here previous functions are called and the magic happens:

#+begin_src python

from time import ctime                                                                              #Import ctime for current time
from mapping import *                                                                               #Import mapping.py functions

print("Currently:", time.ctime())
path = "./output"                                                                                   #specify path for output


# Running the read-mapper defined in mapping.py
genome = getGenome("data/Ecoli_genome.fasta")                                                       #parse genome and genome description to array
Reads = getReads("data/reads_new.fasta")                                                            #parse reads to array

mapped = mapGenome(genome,Reads)                                                                    #map reads to genome

MapSummary(mapped, genome, path)                                                                    #generate .csv summary in output path
Barplot(Reads,mapped, genome, path)                                                                 #generate barplot for overview

#+end_src

* Mapping output and Statistics
** python returns a .csv file
insert Excel screenshot

** Visulisation with R and ggplot2

#+attr_org: :width 400
[[./output/img/F1_Genome_pos_total.png]]

#+attr_org: :width 400
[[./output/img/F2_Genome_pos_orient.png]]



* Resources

** NGS mapping from Tutorial for learning Genomics.
[[https://genomics.sschmeier.com/ngs-mapping/]]

** PieChart
https://r-graph-gallery.com/pie-plot.html

** Groups
Book feedback session:
[[https://docs.google.com/document/d/1gqQZ-vmIGHv3nXg-H3GatdHKmJ-UM38COClTAJtsNO0/edit]]

Chat to find groups:
[[https://docs.google.com/document/d/1RknEWydbXxivWt1V83t9NufH-o0nXl4EqAnhhL4Eb0Y/edit]]

Project and student list:
[[https://docs.google.com/document/d/1nLNA5moYD3z_DvdHuh5t_v5nju3Gx5ferpy24_2UbcI/edit]]
